import telebot
from telebot import types
import subprocess
import os
import glob
import qrcode
import logging
from pathlib import Path
from typing import Optional
from datetime import datetime
from config import api_tg, mainid, wg_local_ip_hint


logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class WireGuardBot:
    def __init__(self, token: str, authorized_users: list, wg_ip_hint: str):
        self.bot = telebot.TeleBot(token)
        self.authorized_users = authorized_users
        self.wg_ip_hint = wg_ip_hint
        self.setup_handlers()
    
    def setup_handlers(self):
        self.bot.message_handler(commands=['start'])(self.start_command)
        self.bot.message_handler(commands=['id'])(self.id_command)
        self.bot.message_handler(content_types=['text'])(self.handle_text)
        self.bot.message_handler(content_types=['sticker'])(self.handle_sticker)
        self.bot.callback_query_handler(func=lambda call: True)(self.handle_callback)
    
    def is_authorized(self, chat_id: int) -> bool:
        return chat_id in self.authorized_users

    def escape_markdown(self, text: str) -> str:
        """Escape special markdown characters"""
        return text.replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace(']', '\\]').replace('`', '\\`')
    
    def send_unauthorized_message(self, message):
        self.bot.send_message(
            message.chat.id, 
            f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –¢—ã –∑–∞–ø–ª—É—Ç–∞–ª!!"
        )

    def save_config(self, message):
        try:
            config_text = message.text
            logger.info(f"Saving config: {config_text}")
            self.bot.send_message(message.chat.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            return config_text
        except Exception as e:
            logger.error(f"Error saving config: {e}")
            self.bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

    def generate_qr_code(self, config_path: str, chat_id: int) -> bool:
        try:
            if not Path(config_path).exists():
                logger.error(f"Config file not found: {config_path}")
                return False
            
            with open(config_path, 'r', encoding='utf-8') as file:
                text = file.read()
            
            qr_code = qrcode.QRCode(version=1, box_size=10, border=5)
            qr_code.add_data(text)
            qr_code.make(fit=True)
            
            img = qr_code.make_image(fill_color='black', back_color='white')
            img_path = Path("temp_qrcode.png")
            img.save(img_path)
            
            with open(img_path, 'rb') as f:
                self.bot.send_photo(chat_id=chat_id, photo=f)
            
            img_path.unlink()
            return True
            
        except Exception as e:
            logger.error(f"Error generating QR code: {e}")
            return False

    @staticmethod
    def sanitize_input(message: str) -> str:
        valid_chars = set('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_')
        sanitized = ''.join(c if c in valid_chars else '_' for c in message)
        return sanitized.lower().strip()

    @staticmethod
    def is_valid_ip_octet(number_str: str) -> bool:
        try:
            num = int(number_str)
            return 2 <= num <= 253
        except ValueError:
            return False

    def show_main_buttons(self, message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        configs_btn = types.KeyboardButton("–ö–æ–Ω—Ñ–∏–≥–∏")
        delete_btn = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å_–∫–æ–Ω—Ñ–∏–≥")
        add_btn = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å_–∫–æ–Ω—Ñ–∏–≥")
        back_btn = types.KeyboardButton("–ù–∞–∑–∞–¥")
        
        markup.add(configs_btn, add_btn, delete_btn, back_btn)
        self.bot.send_message(message.chat.id, text="–í—ã–ø–æ–ª–Ω–∏ –∑–∞–ø—Ä–æ—Å", reply_markup=markup)
    
    def show_monitoring_menu(self, message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        configs_btn = types.KeyboardButton("–ö–æ–Ω—Ñ–∏–≥–∏")
        stats_btn = types.KeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        monitor_btn = types.KeyboardButton("–ú–æ–Ω–∏—Ç–æ—Ä_–∫–ª–∏–µ–Ω—Ç–æ–≤")
        add_btn = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å_–∫–æ–Ω—Ñ–∏–≥")
        bulk_add_btn = types.KeyboardButton("–ú–∞—Å—Å–æ–≤–æ–µ_—Å–æ–∑–¥–∞–Ω–∏–µ")
        delete_btn = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å_–∫–æ–Ω—Ñ–∏–≥")
        bulk_delete_btn = types.KeyboardButton("–ú–∞—Å—Å–æ–≤–æ–µ_—É–¥–∞–ª–µ–Ω–∏–µ")
        recreate_btn = types.KeyboardButton("–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å_–∫–æ–Ω—Ñ–∏–≥–∏")
        back_btn = types.KeyboardButton("–ù–∞–∑–∞–¥")
        
        markup.add(stats_btn, monitor_btn)
        markup.add(configs_btn)
        markup.add(add_btn, bulk_add_btn)
        markup.add(delete_btn, bulk_delete_btn)
        markup.add(recreate_btn)
        markup.add(back_btn)
        self.bot.send_message(message.chat.id, text="üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ VPN —Å–µ—Ä–≤–µ—Ä–∞", reply_markup=markup)

    def validate_message_type(self, message) -> bool:
        if message.sticker is not None:
            self.bot.reply_to(message, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ —Å—Ç–∏–∫–µ—Ä.')
            return False
        elif message.voice is not None:
            self.bot.reply_to(message, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.')
            return False
        elif message.document is not None:
            self.bot.reply_to(message, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç.')
            return False
        return True
    
    def delete_vpn_config(self, message):
        """Delete VPN client configuration by name or IP octet"""
        if not self.validate_message_type(message):
            self.show_monitoring_menu(message)
            return
        
        try:
            input_text = self.sanitize_input(message.text.strip())
            
            # Get current configurations
            configs = self.scan_existing_configs()
            
            if not configs:
                self.bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                self.show_monitoring_menu(message)
                return
            
            # Determine if input is client name or IP octet
            client_name = None
            ip_octet = None
            
            if input_text.isdigit():
                # Input is IP octet
                ip_octet = int(input_text)
                if not (2 <= ip_octet <= 254):
                    self.bot.send_message(
                        message.chat.id, 
                        "‚ùå IP –æ–∫—Ç–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 2 –¥–æ 254"
                    )
                    self.show_monitoring_menu(message)
                    return
                
                # Find client by IP octet
                for name, info in configs.items():
                    if int(info['octet']) == ip_octet:
                        client_name = name
                        break
                
                if not client_name:
                    self.bot.send_message(
                        message.chat.id, 
                        f"‚ùå –ö–ª–∏–µ–Ω—Ç —Å IP {self.wg_ip_hint}.{ip_octet} –Ω–µ –Ω–∞–π–¥–µ–Ω"
                    )
                    self.show_monitoring_menu(message)
                    return
            else:
                # Input is client name
                if input_text not in configs:
                    self.bot.send_message(
                        message.chat.id, 
                        f"‚ùå –ö–ª–∏–µ–Ω—Ç '{input_text}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
                    )
                    self.show_monitoring_menu(message)
                    return
                
                client_name = input_text
                ip_octet = int(configs[client_name]['octet'])
            
            # Perform deletion
            success, message_text = self.perform_client_deletion(client_name, ip_octet, message.chat.id)
            
            if success:
                self.bot.send_message(message.chat.id, message_text, parse_mode='Markdown')
                logger.info(f"Successfully deleted client: {client_name} (IP: {self.wg_ip_hint}.{ip_octet})")
            else:
                self.bot.send_message(message.chat.id, f"‚ùå {message_text}")
                logger.error(f"Failed to delete client: {client_name} - {message_text}")
                
        except Exception as e:
            logger.error(f"Error deleting VPN config: {e}")
            self.bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        self.show_monitoring_menu(message)

    def perform_client_deletion(self, client_name, ip_octet, chat_id):
        """Actually perform the client deletion"""
        try:
            self.bot.send_message(
                chat_id,
                f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ **{self.escape_markdown(client_name)}**...",
                parse_mode='Markdown'
            )
            
            deleted_files = []
            errors = []
            
            # 1. Remove from main server config (wg0.conf)
            try:
                self.remove_client_from_server_config(client_name, ip_octet)
                deleted_files.append("server config peer")
            except Exception as e:
                errors.append(f"server config: {str(e)}")
            
            # 2. Remove client config file
            client_config_path = Path(f"/etc/wireguard/{client_name}_cl.conf")
            if client_config_path.exists():
                try:
                    client_config_path.unlink()
                    deleted_files.append("client config")
                except Exception as e:
                    errors.append(f"client config: {str(e)}")
            
            # 3. Remove client keys
            for key_type in ["privatekey", "publickey"]:
                key_path = Path(f"/etc/wireguard/{client_name}_{key_type}")
                if key_path.exists():
                    try:
                        key_path.unlink()
                        deleted_files.append(f"client {key_type}")
                    except Exception as e:
                        errors.append(f"{key_type}: {str(e)}")
            
            # 4. Update configs.txt
            try:
                self.update_configs_file_after_deletion(client_name, ip_octet)
                deleted_files.append("configs.txt entry")
            except Exception as e:
                errors.append(f"configs.txt: {str(e)}")
            
            # 5. Restart WireGuard
            try:
                result = subprocess.run(['wg-quick', 'down', 'wg0'], capture_output=True, text=True)
                result = subprocess.run(['wg-quick', 'up', 'wg0'], capture_output=True, text=True)
                if result.returncode == 0:
                    deleted_files.append("WireGuard restarted")
                else:
                    errors.append(f"WireGuard restart: {result.stderr}")
            except Exception as e:
                errors.append(f"WireGuard restart: {str(e)}")
            
            # Prepare result message
            if deleted_files and not errors:
                return True, f"‚úÖ **–ö–ª–∏–µ–Ω—Ç '{client_name}' –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω**\n\nüìÇ –£–¥–∞–ª–µ–Ω–æ: {', '.join(deleted_files)}"
            elif deleted_files and errors:
                return True, f"‚ö†Ô∏è **–ö–ª–∏–µ–Ω—Ç '{client_name}' —á–∞—Å—Ç–∏—á–Ω–æ —É–¥–∞–ª–µ–Ω**\n\n‚úÖ –£–¥–∞–ª–µ–Ω–æ: {', '.join(deleted_files)}\n‚ùå –û—à–∏–±–∫–∏: {', '.join(errors)}"
            else:
                return False, f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞: {', '.join(errors)}"
                
        except Exception as e:
            logger.error(f"Error in perform_client_deletion: {e}")
            return False, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"

    def remove_client_from_server_config(self, client_name, ip_octet):
        """Remove client peer from server wg0.conf"""
        config_path = Path("/etc/wireguard/wg0.conf")
        if not config_path.exists():
            raise Exception("Server config not found")
        
        # Read current config
        with open(config_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        # Find and remove client peer section
        new_lines = []
        skip_lines = 0
        peer_found = False
        
        for i, line in enumerate(lines):
            if skip_lines > 0:
                skip_lines -= 1
                continue
                
            # Look for the AllowedIPs line with our client's IP
            if line.strip() == f"AllowedIPs = {self.wg_ip_hint}.{ip_octet}/32":
                peer_found = True
                # Remove this line and the two lines before it ([Peer] and PublicKey)
                # Remove the last 2 lines from new_lines (they should be [Peer] and PublicKey)
                if len(new_lines) >= 2:
                    new_lines = new_lines[:-2]
                # Skip current line
                continue
            
            new_lines.append(line)
        
        if not peer_found:
            raise Exception(f"Peer with IP {self.wg_ip_hint}.{ip_octet} not found in server config")
        
        # Write updated config
        with open(config_path, 'w', encoding='utf-8') as f:
            f.writelines(new_lines)

    def update_configs_file_after_deletion(self, client_name, ip_octet):
        """Update configs.txt after client deletion"""
        configs_file = Path("configs.txt")
        
        if not configs_file.exists():
            return  # File doesn't exist, nothing to update
        
        try:
            with open(configs_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
            
            # Remove lines containing the client
            new_lines = []
            for line in lines:
                # Skip lines that contain this client's info
                if not (client_name in line or f".{ip_octet} =" in line):
                    new_lines.append(line)
            
            # Write updated file
            with open(configs_file, 'w', encoding='utf-8') as f:
                f.writelines(new_lines)
                
        except Exception as e:
            logger.error(f"Error updating configs.txt: {e}")
            raise



    def get_config_name(self, message):
        """First step: get config name"""
        if not self.is_authorized(message.chat.id):
            self.send_unauthorized_message(message)
            return
        
        if not self.validate_message_type(message):
            self.show_monitoring_menu(message)
            return
        
        try:
            config_name = self.sanitize_input(message.text)
            if not config_name:
                self.bot.send_message(message.chat.id, "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                self.show_monitoring_menu(message)
                return
            
            # Store config name and ask for IP
            self.temp_config_name = config_name
            self.show_ip_selection(message)
            
        except Exception as e:
            logger.error(f"Error getting config name: {e}")
            self.bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            self.show_monitoring_menu(message)

    def show_ip_selection(self, message):
        """Show available IP addresses for selection"""
        try:
            # Get available IPs
            available_ips = self.get_available_ips()
            
            if not available_ips:
                self.bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö IP –∞–¥—Ä–µ—Å–æ–≤")
                self.show_monitoring_menu(message)
                return
            
            # Create inline keyboard with available IPs
            markup = types.InlineKeyboardMarkup(row_width=3)
            buttons = []
            
            for ip_octet in available_ips[:15]:  # Show first 15 available IPs
                ip_addr = f"10.20.20.{ip_octet}"
                button = types.InlineKeyboardButton(
                    text=ip_addr, 
                    callback_data=f"select_ip:{ip_octet}"
                )
                buttons.append(button)
            
            # Add buttons in rows of 3
            for i in range(0, len(buttons), 3):
                markup.row(*buttons[i:i+3])
            
            # Add auto-select button
            auto_button = types.InlineKeyboardButton(
                text="üîÑ –ê–≤—Ç–æ–≤—ã–±–æ—Ä", 
                callback_data="select_ip:auto"
            )
            markup.row(auto_button)
            
            self.bot.send_message(
                message.chat.id, 
                f"–í—ã–±–µ—Ä–∏—Ç–µ IP –∞–¥—Ä–µ—Å –¥–ª—è –∫–æ–Ω—Ñ–∏–≥–∞ **{self.temp_config_name}**:\n\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ IP –∞–¥—Ä–µ—Å–æ–≤: {len(available_ips)}",
                reply_markup=markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Error showing IP selection: {e}")
            self.bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö IP")
            self.show_monitoring_menu(message)

    def get_available_ips(self):
        """Get list of available IP octets (2-254)"""
        try:
            # Get existing configurations
            configs = self.scan_existing_configs()
            used_octets = set()
            
            for config_info in configs.values():
                octet = int(config_info['octet'])
                used_octets.add(octet)
            
            # Return available octets (2-254, excluding 1 for server)
            all_octets = set(range(2, 255))
            available_octets = sorted(list(all_octets - used_octets))
            
            return available_octets
            
        except Exception as e:
            logger.error(f"Error getting available IPs: {e}")
            return []

    def add_vpn_config(self, config_name, selected_ip=None):
        """Create VPN config with specified name and IP"""
        try:
            # Determine IP to use
            if selected_ip == "auto" or selected_ip is None:
                # Auto-select first available IP
                available_ips = self.get_available_ips()
                if not available_ips:
                    return False, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö IP –∞–¥—Ä–µ—Å–æ–≤"
                ip_octet = available_ips[0]
            else:
                ip_octet = int(selected_ip)
            
            # Execute add client script with IP parameter
            result = subprocess.run(
                ['scripts/add_cl.sh', config_name, str(ip_octet)], 
                capture_output=True, 
                text=True
            )
            
            if result.returncode != 0:
                logger.error(f"Failed to create VPN config: {result.stderr}")
                return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {result.stderr}"
            
            return True, f"‚úÖ –ö–æ–Ω—Ñ–∏–≥ **{config_name}.conf** —Å–æ–∑–¥–∞–Ω —Å IP 10.20.20.{ip_octet}"
            
        except Exception as e:
            logger.error(f"Error creating VPN config: {e}")
            return False, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"

    def start_bulk_creation(self, message):
        """Start bulk client creation process"""
        try:
            help_text = (
                "üìã **–ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤**\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n\n"
                "**–§–æ—Ä–º–∞—Ç 1 - –ü—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫:**\n"
                "```\n"
                "client1\n"
                "client2\n"
                "client3\n"
                "```\n\n"
                "**–§–æ—Ä–º–∞—Ç 2 - –° —É–∫–∞–∑–∞–Ω–∏–µ–º IP:**\n"
                "```\n"
                "client1:5\n"
                "client2:10\n"
                "client3:15\n"
                "```\n"
                "(–≥–¥–µ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ ':' - –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–∫—Ç–µ—Ç IP)\n\n"
                "**–§–æ—Ä–º–∞—Ç 3 - –°–º–µ—à–∞–Ω–Ω—ã–π:**\n"
                "```\n"
                "client1\n"
                "client2:20\n"
                "client3\n"
                "```\n\n"
                "‚ö†Ô∏è **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**\n"
                "‚Ä¢ –ò–º–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è\n"
                "‚Ä¢ IP –æ–∫—Ç–µ—Ç—ã –æ—Ç 2 –¥–æ 254\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤:"
            )
            
            self.bot.send_message(
                message.chat.id,
                help_text,
                reply_markup=types.ReplyKeyboardRemove(),
                parse_mode='Markdown'
            )
            
            self.bot.register_next_step_handler(message, self.handle_bulk_creation)
            
        except Exception as e:
            logger.error(f"Error starting bulk creation: {e}")
            self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è")
            self.show_monitoring_menu(message)

    def handle_bulk_creation(self, message):
        """Handle bulk client creation"""
        if not self.is_authorized(message.chat.id):
            self.send_unauthorized_message(message)
            return
        
        if not self.validate_message_type(message):
            self.show_monitoring_menu(message)
            return
        
        try:
            # Parse client list
            client_list = self.parse_client_list(message.text)
            
            if not client_list:
                self.bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤")
                self.show_monitoring_menu(message)
                return
            
            
            # Validate clients
            validation_result = self.validate_bulk_clients(client_list)
            if not validation_result["valid"]:
                error_msg = f"‚ùå –û—à–∏–±–∫–∏ –≤ —Å–ø–∏—Å–∫–µ –∫–ª–∏–µ–Ω—Ç–æ–≤:\n{validation_result['errors']}"
                self.bot.send_message(message.chat.id, error_msg)
                self.show_monitoring_menu(message)
                return
            
            # Show confirmation
            self.show_bulk_confirmation(message, client_list)
            
        except Exception as e:
            logger.error(f"Error handling bulk creation: {e}")
            self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ø–∏—Å–∫–∞")
            self.show_monitoring_menu(message)

    def parse_client_list(self, text):
        """Parse client list from text"""
        try:
            clients = []
            lines = text.strip().split('\n')
            
            for line in lines:
                line = line.strip()
                if not line or line.startswith('#'):  # Skip empty lines and comments
                    continue
                
                if ':' in line:
                    # Format: client_name:ip_octet
                    name, ip_str = line.split(':', 1)
                    name = name.strip()
                    try:
                        ip_octet = int(ip_str.strip())
                        if ip_octet < 2 or ip_octet > 254:
                            continue
                    except ValueError:
                        continue
                    clients.append({"name": name, "ip": ip_octet})
                else:
                    # Format: client_name (auto IP)
                    clients.append({"name": line, "ip": "auto"})
            
            return clients
            
        except Exception as e:
            logger.error(f"Error parsing client list: {e}")
            return []

    def validate_bulk_clients(self, client_list):
        """Validate bulk client list"""
        try:
            errors = []
            names = set()
            used_ips = set()
            
            # Get existing configurations
            existing_configs = self.scan_existing_configs()
            existing_names = set(existing_configs.keys())
            existing_ips = set(int(config['octet']) for config in existing_configs.values())
            
            import re
            name_pattern = re.compile(r'^[a-zA-Z0-9_-]+$')
            
            for i, client in enumerate(client_list, 1):
                name = client["name"]
                ip_octet = client["ip"]
                
                # Validate name format
                if not name_pattern.match(name):
                    errors.append(f"–°—Ç—Ä–æ–∫–∞ {i}: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∏ '{name}'")
                
                # Check name length
                if len(name) > 50:
                    errors.append(f"–°—Ç—Ä–æ–∫–∞ {i}: –∏–º—è '{name}' —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å 50 —Å–∏–º–≤–æ–ª–æ–≤)")
                
                # Check for duplicate names in list
                if name in names:
                    errors.append(f"–°—Ç—Ä–æ–∫–∞ {i}: –¥—É–±–ª–∏—Ä—É—é—â–µ–µ—Å—è –∏–º—è '{name}'")
                names.add(name)
                
                # Check if name already exists
                if name in existing_names:
                    errors.append(f"–°—Ç—Ä–æ–∫–∞ {i}: –∫–ª–∏–µ–Ω—Ç '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                
                # Validate IP if specified
                if ip_octet != "auto":
                    if ip_octet in used_ips:
                        errors.append(f"–°—Ç—Ä–æ–∫–∞ {i}: –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è IP .{ip_octet}")
                    if ip_octet in existing_ips:
                        errors.append(f"–°—Ç—Ä–æ–∫–∞ {i}: IP .{ip_octet} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
                    used_ips.add(ip_octet)
            
            return {
                "valid": len(errors) == 0,
                "errors": "\n".join(errors)
            }
            
        except Exception as e:
            logger.error(f"Error validating bulk clients: {e}")
            return {"valid": False, "errors": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞"}

    def show_bulk_confirmation(self, message, client_list):
        """Show bulk creation confirmation"""
        try:
            # Count auto and manual IPs
            auto_count = sum(1 for c in client_list if c["ip"] == "auto")
            manual_count = len(client_list) - auto_count
            
            # Create preview
            preview_lines = []
            for i, client in enumerate(client_list[:10]):  # Show first 10
                ip_info = f"IP: .{client['ip']}" if client["ip"] != "auto" else "IP: –∞–≤—Ç–æ"
                preview_lines.append(f"‚Ä¢ **{self.escape_markdown(client['name'])}** ({ip_info})")
            
            if len(client_list) > 10:
                preview_lines.append(f"... –∏ –µ—â—ë {len(client_list) - 10} –∫–ª–∏–µ–Ω—Ç–æ–≤")
            
            confirmation_msg = (
                f"üìã **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è**\n\n"
                f"üë• **–ö–ª–∏–µ–Ω—Ç–æ–≤ –∫ —Å–æ–∑–¥–∞–Ω–∏—é:** {len(client_list)}\n"
                f"üîÑ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π IP:** {auto_count}\n"
                f"üìç **–£–∫–∞–∑–∞–Ω–Ω—ã–π IP:** {manual_count}\n\n"
                f"**–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:**\n" + "\n".join(preview_lines) + "\n\n"
                f"‚è±Ô∏è **–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è:** {len(client_list) * 3} —Å–µ–∫.\n\n"
                f"–°–æ–∑–¥–∞—Ç—å –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤?"
            )
            
            # Create inline keyboard
            markup = types.InlineKeyboardMarkup()
            confirm_btn = types.InlineKeyboardButton(
                "‚úÖ –°–æ–∑–¥–∞—Ç—å –≤—Å–µ—Ö", 
                callback_data="bulk_create_confirm"
            )
            cancel_btn = types.InlineKeyboardButton(
                "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", 
                callback_data="bulk_create_cancel"
            )
            markup.row(confirm_btn)
            markup.row(cancel_btn)
            
            # Store client list temporarily
            self.temp_bulk_clients = client_list
            
            self.bot.send_message(
                message.chat.id,
                confirmation_msg,
                reply_markup=markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Error showing bulk confirmation: {e}")
            self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è")
            self.show_monitoring_menu(message)

    def perform_bulk_creation(self, message, client_list):
        """Actually perform bulk client creation"""
        try:
            # Edit message to show progress
            self.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=message.message_id,
                text="‚è≥ **–ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤...**\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
                parse_mode='Markdown'
            )
            
            results = {
                "created": [],
                "failed": [],
                "total": len(client_list)
            }
            
            # Progress tracking
            progress_msg_id = None
            
            for i, client in enumerate(client_list, 1):
                try:
                    # Update progress every 5 clients or on last client
                    if i % 5 == 0 or i == len(client_list):
                        progress_text = (
                            f"‚è≥ **–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤...**\n\n"
                            f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(client_list)}\n"
                            f"‚úÖ –°–æ–∑–¥–∞–Ω–æ: {len(results['created'])}\n"
                            f"‚ùå –û—à–∏–±–æ–∫: {len(results['failed'])}\n\n"
                            f"–¢–µ–∫—É—â–∏–π –∫–ª–∏–µ–Ω—Ç: **{self.escape_markdown(client['name'])}**"
                        )
                        
                        if progress_msg_id:
                            try:
                                self.bot.edit_message_text(
                                    chat_id=message.chat.id,
                                    message_id=progress_msg_id,
                                    text=progress_text,
                                    parse_mode='Markdown'
                                )
                            except:
                                pass
                        else:
                            progress_msg = self.bot.send_message(
                                message.chat.id,
                                progress_text,
                                parse_mode='Markdown'
                            )
                            progress_msg_id = progress_msg.message_id
                    
                    # Create client
                    success, result_msg = self.add_vpn_config(client["name"], client["ip"])
                    
                    if success:
                        results["created"].append({
                            "name": client["name"],
                            "ip": client["ip"]
                        })
                        logger.info(f"Bulk creation: {client['name']} created successfully")
                    else:
                        results["failed"].append({
                            "name": client["name"],
                            "error": result_msg
                        })
                        logger.error(f"Bulk creation: {client['name']} failed - {result_msg}")
                    
                    # Small delay to prevent overwhelming
                    import time
                    time.sleep(0.5)
                    
                except Exception as e:
                    results["failed"].append({
                        "name": client["name"],
                        "error": str(e)
                    })
                    logger.error(f"Error creating client {client['name']}: {e}")
            
            # Send final results
            self.send_bulk_results(message, results)
            
            # Clean up temp data
            if hasattr(self, 'temp_bulk_clients'):
                delattr(self, 'temp_bulk_clients')
            
        except Exception as e:
            logger.error(f"Error performing bulk creation: {e}")
            self.bot.send_message(
                message.chat.id,
                f"‚ùå **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏:**\n{str(e)[:200]}",
                parse_mode='Markdown'
            )
            self.show_monitoring_menu(message)

    def send_bulk_results(self, message, results):
        """Send bulk creation results"""
        try:
            created_count = len(results["created"])
            failed_count = len(results["failed"])
            total_count = results["total"]
            
            # Create results summary
            if created_count == total_count:
                status_emoji = "‚úÖ"
                status_text = "–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!"
            elif created_count > 0:
                status_emoji = "‚ö†Ô∏è"
                status_text = "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏"
            else:
                status_emoji = "‚ùå"
                status_text = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"
            
            summary_msg = (
                f"{status_emoji} **{status_text}**\n\n"
                f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                f"‚úÖ –°–æ–∑–¥–∞–Ω–æ: {created_count}/{total_count}\n"
                f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n"
            )
            
            # Add created clients list
            if results["created"]:
                summary_msg += f"\nüü¢ **–°–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã:**\n"
                for client in results["created"][:10]:  # Show first 10
                    ip_info = f"(.{client['ip']})" if client["ip"] != "auto" else "(–∞–≤—Ç–æ IP)"
                    summary_msg += f"‚Ä¢ **{self.escape_markdown(client['name'])}** {ip_info}\n"
                
                if len(results["created"]) > 10:
                    summary_msg += f"... –∏ –µ—â—ë {len(results['created']) - 10} –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
            
            # Add failed clients list
            if results["failed"]:
                summary_msg += f"\nüî¥ **–û—à–∏–±–∫–∏:**\n"
                for client in results["failed"][:5]:  # Show first 5 errors
                    error_short = client["error"][:50] + "..." if len(client["error"]) > 50 else client["error"]
                    summary_msg += f"‚Ä¢ **{self.escape_markdown(client['name'])}**: {error_short}\n"
                
                if len(results["failed"]) > 5:
                    summary_msg += f"... –∏ –µ—â—ë {len(results['failed']) - 5} –æ—à–∏–±–æ–∫\n"
            
            # Send results
            self.bot.send_message(message.chat.id, summary_msg, parse_mode='Markdown')
            
            # Send configs archive if there are created clients
            if results["created"]:
                self.send_bulk_configs_archive(message, results["created"])
            
            self.show_monitoring_menu(message)
            logger.info(f"Bulk creation completed: {created_count} created, {failed_count} failed")
            
        except Exception as e:
            logger.error(f"Error sending bulk results: {e}")
            self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

    def send_bulk_configs_archive(self, message, created_clients):
        """Send archive with all created configs"""
        try:
            if len(created_clients) <= 5:
                # Send configs individually for small batches
                for client in created_clients:
                    try:
                        config_file_path = Path(f"/etc/wireguard/{client['name']}_cl.conf")
                        if config_file_path.exists():
                            with open(config_file_path, 'rb') as f:
                                self.bot.send_document(
                                    message.chat.id,
                                    f,
                                    caption=f"üìÑ {client['name']}"
                                )
                    except Exception as e:
                        logger.error(f"Error sending individual config {client['name']}: {e}")
            else:
                # Create ZIP archive for large batches
                import zipfile
                import tempfile
                import os
                
                with tempfile.NamedTemporaryFile(suffix='.zip', delete=False) as temp_zip:
                    with zipfile.ZipFile(temp_zip.name, 'w', zipfile.ZIP_DEFLATED) as zipf:
                        configs_added = 0
                        for client in created_clients:
                            config_file_path = Path(f"/etc/wireguard/{client['name']}_cl.conf")
                            if config_file_path.exists():
                                zipf.write(
                                    config_file_path, 
                                    f"{client['name']}.conf"
                                )
                                configs_added += 1
                    
                    if configs_added > 0:
                        with open(temp_zip.name, 'rb') as f:
                            self.bot.send_document(
                                message.chat.id,
                                f,
                                caption=f"üì¶ –ê—Ä—Ö–∏–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π ({configs_added} —Ñ–∞–π–ª–æ–≤)",
                                filename=f"wireguard_configs_{len(created_clients)}.zip"
                            )
                    
                    # Clean up
                    os.unlink(temp_zip.name)
                    
        except Exception as e:
            logger.error(f"Error creating configs archive: {e}")
            self.bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")

    def start_bulk_deletion(self, message):
        """Start bulk client deletion process"""
        try:
            # Get current configurations
            configs = self.scan_existing_configs()
            
            if not configs:
                self.bot.send_message(
                    message.chat.id,
                    "‚ùå –ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                    reply_markup=types.ReplyKeyboardRemove()
                )
                self.show_monitoring_menu(message)
                return
            
            help_text = (
                "üóëÔ∏è **–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤**\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n\n"
                "**–§–æ—Ä–º–∞—Ç 1 - –ü–æ –∏–º–µ–Ω–∞–º:**\n"
                "```\n"
                "client1\n"
                "client2\n"
                "client3\n"
                "```\n\n"
                "**–§–æ—Ä–º–∞—Ç 2 - –ü–æ IP –æ–∫—Ç–µ—Ç–∞–º:**\n"
                "```\n"
                "5\n"
                "10\n"
                "15\n"
                "```\n\n"
                "**–§–æ—Ä–º–∞—Ç 3 - –°–º–µ—à–∞–Ω–Ω—ã–π:**\n"
                "```\n"
                "client1\n"
                "10\n"
                "client3\n"
                "```\n\n"
                "**–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
                "‚Ä¢ `*` –∏–ª–∏ `all` - —É–¥–∞–ª–∏—Ç—å –í–°–ï–• –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
                "‚Ä¢ `#–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π` - —Å—Ç—Ä–æ–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è\n\n"
                f"**–¢–µ–∫—É—â–∏–µ –∫–ª–∏–µ–Ω—Ç—ã ({len(configs)}):**\n"
            )
            
            # Add current clients list (first 15)
            sorted_configs = sorted(configs.items(), key=lambda x: int(x[1]['octet']))
            for i, (client_name, config_info) in enumerate(sorted_configs[:15]):
                escaped_name = self.escape_markdown(client_name)
                help_text += f"‚Ä¢ **{escaped_name}** - {config_info['ip']} (–æ–∫—Ç–µ—Ç: {config_info['octet']})\n"
            
            if len(configs) > 15:
                help_text += f"... –∏ –µ—â—ë {len(configs) - 15} –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
            
            help_text += "\n‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï: –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!**\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
            
            self.bot.send_message(
                message.chat.id,
                help_text,
                reply_markup=types.ReplyKeyboardRemove(),
                parse_mode='Markdown'
            )
            
            self.bot.register_next_step_handler(message, self.handle_bulk_deletion)
            
        except Exception as e:
            logger.error(f"Error starting bulk deletion: {e}")
            self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è")
            self.show_monitoring_menu(message)

    def handle_bulk_deletion(self, message):
        """Handle bulk client deletion"""
        if not self.is_authorized(message.chat.id):
            self.send_unauthorized_message(message)
            return
        
        if not self.validate_message_type(message):
            self.show_monitoring_menu(message)
            return
        
        try:
            # Parse deletion list
            deletion_list = self.parse_deletion_list(message.text)
            
            if not deletion_list:
                self.bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                self.show_monitoring_menu(message)
                return
            
            # Validate deletion list
            validation_result = self.validate_bulk_deletion(deletion_list)
            if not validation_result["valid"]:
                error_msg = f"‚ùå –û—à–∏–±–∫–∏ –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n{validation_result['errors']}"
                self.bot.send_message(message.chat.id, error_msg)
                self.show_monitoring_menu(message)
                return
            
            # Show confirmation
            self.show_bulk_deletion_confirmation(message, deletion_list, validation_result["clients_to_delete"])
            
        except Exception as e:
            logger.error(f"Error handling bulk deletion: {e}")
            self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ø–∏—Å–∫–∞")
            self.show_monitoring_menu(message)

    def parse_deletion_list(self, text):
        """Parse deletion list from text"""
        try:
            items = []
            lines = text.strip().split('\n')
            
            for line in lines:
                line = line.strip()
                if not line or line.startswith('#'):  # Skip empty lines and comments
                    continue
                
                # Check for special commands
                if line.lower() in ['*', 'all', '–≤—Å–µ']:
                    items.append({"type": "all"})
                elif line.isdigit():
                    # IP octet
                    octet = int(line)
                    if 2 <= octet <= 254:
                        items.append({"type": "ip", "value": octet})
                else:
                    # Client name
                    items.append({"type": "name", "value": line})
            
            return items
            
        except Exception as e:
            logger.error(f"Error parsing deletion list: {e}")
            return []

    def validate_bulk_deletion(self, deletion_list):
        """Validate bulk deletion list"""
        try:
            errors = []
            clients_to_delete = {}
            
            # Get existing configurations
            existing_configs = self.scan_existing_configs()
            
            if not existing_configs:
                return {"valid": False, "errors": "–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"}
            
            for i, item in enumerate(deletion_list, 1):
                if item["type"] == "all":
                    # Delete all clients
                    clients_to_delete.update(existing_configs)
                    continue
                elif item["type"] == "ip":
                    # Find client by IP octet
                    octet = item["value"]
                    found = False
                    for name, config in existing_configs.items():
                        if int(config['octet']) == octet:
                            clients_to_delete[name] = config
                            found = True
                            break
                    
                    if not found:
                        errors.append(f"–°—Ç—Ä–æ–∫–∞ {i}: IP –æ–∫—Ç–µ—Ç {octet} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        
                elif item["type"] == "name":
                    # Find client by name
                    name = item["value"]
                    if name in existing_configs:
                        clients_to_delete[name] = existing_configs[name]
                    else:
                        errors.append(f"–°—Ç—Ä–æ–∫–∞ {i}: –∫–ª–∏–µ–Ω—Ç '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            if not clients_to_delete and not errors:
                errors.append("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            
            return {
                "valid": len(errors) == 0,
                "errors": "\n".join(errors),
                "clients_to_delete": clients_to_delete
            }
            
        except Exception as e:
            logger.error(f"Error validating bulk deletion: {e}")
            return {"valid": False, "errors": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞"}

    def show_bulk_deletion_confirmation(self, message, deletion_list, clients_to_delete):
        """Show bulk deletion confirmation"""
        try:
            delete_count = len(clients_to_delete)
            
            # Create preview
            preview_lines = []
            for i, (client_name, config_info) in enumerate(sorted(clients_to_delete.items(), key=lambda x: int(x[1]['octet']))[:10]):
                preview_lines.append(f"‚Ä¢ **{self.escape_markdown(client_name)}** - {config_info['ip']}")
            
            if len(clients_to_delete) > 10:
                preview_lines.append(f"... –∏ –µ—â—ë {len(clients_to_delete) - 10} –∫–ª–∏–µ–Ω—Ç–æ–≤")
            
            # Determine danger level
            if delete_count >= 10:
                danger_emoji = "‚ö†Ô∏è"
                danger_text = "–ú–ê–°–°–û–í–û–ï –£–î–ê–õ–ï–ù–ò–ï"
            elif delete_count >= 5:
                danger_emoji = "üî∂"
                danger_text = "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ"
            else:
                danger_emoji = "üóëÔ∏è"
                danger_text = "–£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤"
            
            confirmation_msg = (
                f"{danger_emoji} **{danger_text}**\n\n"
                f"üóÇÔ∏è **–ö–ª–∏–µ–Ω—Ç–æ–≤ –∫ —É–¥–∞–ª–µ–Ω–∏—é:** {delete_count}\n\n"
                f"**–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã:**\n" + "\n".join(preview_lines) + "\n\n"
                f"‚è±Ô∏è **–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è:** {delete_count * 2} —Å–µ–∫.\n\n"
                f"üö® **–í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!**\n"
                f"–í—Å–µ —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∏ –∫–ª—é—á–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞.\n\n"
                f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ?"
            )
            
            # Create inline keyboard
            markup = types.InlineKeyboardMarkup()
            if delete_count >= 10:
                confirm_text = f"üí• –£–î–ê–õ–ò–¢–¨ –í–°–ï {delete_count}"
            else:
                confirm_text = f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å {delete_count}"
                
            confirm_btn = types.InlineKeyboardButton(
                confirm_text, 
                callback_data="bulk_delete_confirm"
            )
            cancel_btn = types.InlineKeyboardButton(
                "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", 
                callback_data="bulk_delete_cancel"
            )
            markup.row(confirm_btn)
            markup.row(cancel_btn)
            
            # Store deletion list temporarily
            self.temp_bulk_deletion = clients_to_delete
            
            self.bot.send_message(
                message.chat.id,
                confirmation_msg,
                reply_markup=markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Error showing bulk deletion confirmation: {e}")
            self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —É–¥–∞–ª–µ–Ω–∏—è")
            self.show_monitoring_menu(message)

    def perform_bulk_deletion(self, message, clients_to_delete):
        """Actually perform bulk client deletion"""
        try:
            # Edit message to show progress
            self.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=message.message_id,
                text="‚è≥ **–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤...**\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
                parse_mode='Markdown'
            )
            
            results = {
                "deleted": [],
                "failed": [],
                "total": len(clients_to_delete)
            }
            
            # Progress tracking
            progress_msg_id = None
            
            for i, (client_name, config_info) in enumerate(clients_to_delete.items(), 1):
                try:
                    # Update progress every 3 clients or on last client
                    if i % 3 == 0 or i == len(clients_to_delete):
                        progress_text = (
                            f"‚è≥ **–£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤...**\n\n"
                            f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(clients_to_delete)}\n"
                            f"‚úÖ –£–¥–∞–ª–µ–Ω–æ: {len(results['deleted'])}\n"
                            f"‚ùå –û—à–∏–±–æ–∫: {len(results['failed'])}\n\n"
                            f"–¢–µ–∫—É—â–∏–π –∫–ª–∏–µ–Ω—Ç: **{self.escape_markdown(client_name)}**"
                        )
                        
                        if progress_msg_id:
                            try:
                                self.bot.edit_message_text(
                                    chat_id=message.chat.id,
                                    message_id=progress_msg_id,
                                    text=progress_text,
                                    parse_mode='Markdown'
                                )
                            except:
                                pass
                        else:
                            progress_msg = self.bot.send_message(
                                message.chat.id,
                                progress_text,
                                parse_mode='Markdown'
                            )
                            progress_msg_id = progress_msg.message_id
                    
                    # Delete client
                    ip_octet = int(config_info['octet'])
                    success, result_msg = self.perform_client_deletion(client_name, ip_octet, message.chat.id)
                    
                    if success:
                        results["deleted"].append({
                            "name": client_name,
                            "ip": config_info['ip']
                        })
                        logger.info(f"Bulk deletion: {client_name} deleted successfully")
                    else:
                        results["failed"].append({
                            "name": client_name,
                            "error": result_msg
                        })
                        logger.error(f"Bulk deletion: {client_name} failed - {result_msg}")
                    
                    # Small delay to prevent overwhelming
                    import time
                    time.sleep(0.3)
                    
                except Exception as e:
                    results["failed"].append({
                        "name": client_name,
                        "error": str(e)
                    })
                    logger.error(f"Error deleting client {client_name}: {e}")
            
            # Send final results
            self.send_bulk_deletion_results(message, results)
            
            # Clean up temp data
            if hasattr(self, 'temp_bulk_deletion'):
                delattr(self, 'temp_bulk_deletion')
            
        except Exception as e:
            logger.error(f"Error performing bulk deletion: {e}")
            self.bot.send_message(
                message.chat.id,
                f"‚ùå **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —É–¥–∞–ª–µ–Ω–∏–∏:**\n{str(e)[:200]}",
                parse_mode='Markdown'
            )
            self.show_monitoring_menu(message)

    def send_bulk_deletion_results(self, message, results):
        """Send bulk deletion results"""
        try:
            deleted_count = len(results["deleted"])
            failed_count = len(results["failed"])
            total_count = results["total"]
            
            # Create results summary
            if deleted_count == total_count:
                status_emoji = "‚úÖ"
                status_text = "–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã —É–¥–∞–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"
            elif deleted_count > 0:
                status_emoji = "‚ö†Ô∏è"
                status_text = "–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏"
            else:
                status_emoji = "‚ùå"
                status_text = "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"
            
            summary_msg = (
                f"{status_emoji} **{status_text}**\n\n"
                f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ: {deleted_count}/{total_count}\n"
                f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n"
            )
            
            # Add deleted clients list
            if results["deleted"]:
                summary_msg += f"\nüü¢ **–£–¥–∞–ª–µ–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã:**\n"
                for client in results["deleted"][:10]:  # Show first 10
                    summary_msg += f"‚Ä¢ **{self.escape_markdown(client['name'])}** ({client['ip']})\n"
                
                if len(results["deleted"]) > 10:
                    summary_msg += f"... –∏ –µ—â—ë {len(results['deleted']) - 10} –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
            
            # Add failed clients list
            if results["failed"]:
                summary_msg += f"\nüî¥ **–û—à–∏–±–∫–∏:**\n"
                for client in results["failed"][:5]:  # Show first 5 errors
                    error_short = client["error"][:50] + "..." if len(client["error"]) > 50 else client["error"]
                    summary_msg += f"‚Ä¢ **{self.escape_markdown(client['name'])}**: {error_short}\n"
                
                if len(results["failed"]) > 5:
                    summary_msg += f"... –∏ –µ—â—ë {len(results['failed']) - 5} –æ—à–∏–±–æ–∫\n"
            
            # Send results
            self.bot.send_message(message.chat.id, summary_msg, parse_mode='Markdown')
            
            self.show_monitoring_menu(message)
            logger.info(f"Bulk deletion completed: {deleted_count} deleted, {failed_count} failed")
            
        except Exception as e:
            logger.error(f"Error sending bulk deletion results: {e}")
            self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

    def uninstall_wireguard(self, message):
        try:
            chat_id = message.chat.id
            self.bot.send_message(chat_id, "–£–¥–∞–ª—è—é WireGuard –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
            
            commands = [
                "wg-quick down wg0",
                "apt-get remove -y wireguard wireguard-tools qrencode",
                "rm -rf /etc/wireguard",
                "rm -f /etc/sysctl.d/wg.conf",
                "sysctl --system"
            ]
            
            for cmd in commands:
                result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
                if result.returncode != 0:
                    logger.warning(f"Command failed: {cmd}, error: {result.stderr}")
            
            self.bot.send_message(chat_id, "WireGuard —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
            logger.info("WireGuard uninstalled successfully")
            
        except Exception as e:
            logger.error(f"Error uninstalling WireGuard: {e}")
            self.bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ WireGuard")
        
        self.show_monitoring_menu(message)

    def start_command(self, message):
        if self.is_authorized(message.chat.id):
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            monitoring_btn = types.KeyboardButton("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
            admin_btn = types.KeyboardButton("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ")
            markup.add(monitoring_btn, admin_btn)
            
            welcome_text = f"{message.from_user.first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è VPN Wireguard"
            self.bot.send_message(message.chat.id, text=welcome_text, reply_markup=markup)
            logger.info(f"User {message.from_user.username} ({message.chat.id}) started the bot")
        else:
            self.send_unauthorized_message(message)
            logger.warning(f"Unauthorized access attempt from {message.chat.id}")

    def handle_sticker(self, message):
        self.bot.reply_to(message, '–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å—Ç–∏–∫–µ—Ä!')

    def handle_callback(self, call):
        """Handle inline keyboard callbacks"""
        if not self.is_authorized(call.from_user.id):
            self.bot.answer_callback_query(call.id, "Unauthorized")
            return
        
        try:
            if call.data.startswith("select_ip:"):
                selected_ip = call.data.split(":")[1]
                
                # Create config with selected IP
                config_name = getattr(self, 'temp_config_name', None)
                if not config_name:
                    self.bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –∏–º—è –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    return
                
                success, message_text = self.add_vpn_config(config_name, selected_ip)
                
                # Edit the message to remove inline keyboard
                self.bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ **{config_name}**...",
                    parse_mode='Markdown'
                )
                
                # Send result
                if success:
                    self.bot.send_message(call.message.chat.id, message_text, parse_mode='Markdown')
                    
                    # Check WireGuard status
                    import time
                    time.sleep(2)  # Wait for WireGuard to fully start
                    
                    try:
                        # Check if WireGuard is running
                        wg_status = subprocess.run(['pgrep', '-f', 'wg-quick.*wg0'], 
                                                 capture_output=True, text=True)
                        if wg_status.returncode == 0:
                            status_msg = "üü¢ WireGuard —Å–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω"
                        else:
                            status_msg = "üî¥ WireGuard —Å–µ—Ä–≤–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
                        
                        self.bot.send_message(call.message.chat.id, f"–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞: {status_msg}")
                    except Exception as e:
                        logger.error(f"Error checking WireGuard status: {e}")
                    
                    # Try to send the config file
                    try:
                        config_file_path = Path(f"/etc/wireguard/{config_name}_cl.conf")
                        if config_file_path.exists():
                            with open(config_file_path, 'rb') as file:
                                self.bot.send_document(
                                    call.message.chat.id, 
                                    file, 
                                    caption=f"üìÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {config_name}"
                                )
                        else:
                            logger.error(f"Config file not found: {config_file_path}")
                    except Exception as e:
                        logger.error(f"Error sending config file: {e}")
                else:
                    self.bot.send_message(call.message.chat.id, f"‚ùå {message_text}")
                
                self.show_monitoring_menu(call.message)
                self.bot.answer_callback_query(call.id)
                
            elif call.data.startswith("restore_confirm:"):
                temp_filename = call.data.split(":", 1)[1]
                self.perform_restore(call.message, temp_filename)
                self.bot.answer_callback_query(call.id)
                
            elif call.data == "restore_cancel":
                self.bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text="‚ùå –ò–º–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω"
                )
                self.show_admin_menu(call.message)
                self.bot.answer_callback_query(call.id)
                
            elif call.data == "bulk_create_confirm":
                client_list = getattr(self, 'temp_bulk_clients', [])
                if client_list:
                    self.perform_bulk_creation(call.message, client_list)
                else:
                    self.bot.edit_message_text(
                        chat_id=call.message.chat.id,
                        message_id=call.message.message_id,
                        text="‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                    )
                self.bot.answer_callback_query(call.id)
                
            elif call.data == "bulk_create_cancel":
                self.bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text="‚ùå –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
                )
                self.show_monitoring_menu(call.message)
                self.bot.answer_callback_query(call.id)
                
            elif call.data == "bulk_delete_confirm":
                clients_to_delete = getattr(self, 'temp_bulk_deletion', {})
                if clients_to_delete:
                    self.perform_bulk_deletion(call.message, clients_to_delete)
                else:
                    self.bot.edit_message_text(
                        chat_id=call.message.chat.id,
                        message_id=call.message.message_id,
                        text="‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                    )
                self.bot.answer_callback_query(call.id)
                
            elif call.data == "bulk_delete_cancel":
                self.bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text="‚ùå –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
                )
                self.show_monitoring_menu(call.message)
                self.bot.answer_callback_query(call.id)
                
        except Exception as e:
            logger.error(f"Error handling callback: {e}")
            self.bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    def id_command(self, message):
        user_info = f"Id: {message.chat.id}\nusername: {message.from_user.username}"
        self.bot.send_message(message.chat.id, text=user_info)
        logger.info(f"ID command used by {message.chat.id}")

    def handle_text(self, message):
        if not self.is_authorized(message.chat.id):
            self.send_unauthorized_message(message)
            return
        
        text = message.text.strip()
        if not text:
            return
        
        logger.info(f"User {message.chat.id} sent: {text}")
        
        if text == "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥":
            self.show_monitoring_menu(message)
        elif text == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ":
            self.show_admin_menu(message)
        elif text == "–£–¥–∞–ª–∏—Ç—å_–∫–æ–Ω—Ñ–∏–≥":
            self.prompt_delete_config(message)
        elif text == "–î–æ–±–∞–≤–∏—Ç—å_–∫–æ–Ω—Ñ–∏–≥":
            self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞", reply_markup=types.ReplyKeyboardRemove())
            self.bot.register_next_step_handler(message, self.get_config_name)
        elif text == "–ú–∞—Å—Å–æ–≤–æ–µ_—Å–æ–∑–¥–∞–Ω–∏–µ":
            self.start_bulk_creation(message)
        elif text == "–ú–∞—Å—Å–æ–≤–æ–µ_—É–¥–∞–ª–µ–Ω–∏–µ":
            self.start_bulk_deletion(message)
        elif text == "–ü–æ–ª–Ω–æ–µ_—É–¥–∞–ª–µ–Ω–∏–µ":
            self.confirm_uninstall(message)
        elif text == "–î–∞ —É–¥–∞–ª–∏—Ç—å –ù–ê–í–°–ï–ì–î–ê":
            self.uninstall_wireguard(message)

        elif text == "–ö–æ–Ω—Ñ–∏–≥–∏":
            self.send_configs(message)
        elif text == "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å_–∫–æ–Ω–∏–≥—É—Ä–∞—Ü–∏—é":
            self.backup_config(message)
        elif text == "–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å_–∫–æ–Ω–∏–≥—É—Ä–∞—Ü–∏—é":
            self.restore_config(message)
        elif text == "–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å_–∫–æ–Ω—Ñ–∏–≥–∏":
            self.recreate_configs(message)
        elif text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            self.show_statistics(message)
        elif text == "–ú–æ–Ω–∏—Ç–æ—Ä_–∫–ª–∏–µ–Ω—Ç–æ–≤":
            self.show_clients_monitor(message)
        elif text == "–£—Å—Ç–∞–Ω–æ–≤–∫–∞_Wireguard":
            self.install_wireguard(message)
        elif text == "–î–∞":
            self.reinstall_wireguard(message)
        elif text == "–ù–µ—Ç":
            self.show_main_menu(message)
        elif text == "–ù–∞–∑–∞–¥":
            self.show_main_menu(message)
        else:
            self.bot.send_message(message.chat.id, text="–ù–∞ —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É —è –Ω–µ –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–ª..")
            logger.info(f"Unknown command from user {message.chat.id}: {text}")
    
    def show_main_menu(self, message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        monitoring_btn = types.KeyboardButton("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
        admin_btn = types.KeyboardButton("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ")
        markup.add(monitoring_btn, admin_btn)
        self.bot.send_message(message.chat.id, text="–ú–µ–Ω—é", reply_markup=markup)
    
    def show_admin_menu(self, message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        install_btn = types.KeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∫–∞_Wireguard")
        uninstall_btn = types.KeyboardButton("–ü–æ–ª–Ω–æ–µ_—É–¥–∞–ª–µ–Ω–∏–µ")
        backup_btn = types.KeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å_–∫–æ–Ω–∏–≥—É—Ä–∞—Ü–∏—é")
        restore_btn = types.KeyboardButton("–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å_–∫–æ–Ω–∏–≥—É—Ä–∞—Ü–∏—é")
        back_btn = types.KeyboardButton("–ù–∞–∑–∞–¥")
        markup.add(install_btn, uninstall_btn, backup_btn, restore_btn, back_btn)
        self.bot.send_message(message.chat.id, text="–í—ã–ø–æ–ª–Ω–∏ –∑–∞–ø—Ä–æ—Å", reply_markup=markup)
    
    def confirm_uninstall(self, message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        yes_btn = types.KeyboardButton("–î–∞ —É–¥–∞–ª–∏—Ç—å –ù–ê–í–°–ï–ì–î–ê")
        no_btn = types.KeyboardButton("–ù–µ—Ç")
        markup.add(yes_btn, no_btn)
        self.bot.send_message(
            message.chat.id, 
            text="Wireguard –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞ —Å–æ –≤—Å–µ–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.\n–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", 
            reply_markup=markup
        )
    
    def prompt_delete_config(self, message):
        """Show list of clients and prompt for deletion"""
        try:
            # Get current configurations
            configs = self.scan_existing_configs()
            
            if not configs:
                self.bot.send_message(
                    message.chat.id, 
                    "‚ùå –ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                    reply_markup=types.ReplyKeyboardRemove()
                )
                self.show_monitoring_menu(message)
                return
            
            # Create client list message
            clients_msg = "üë• **–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:**\n\n"
            
            sorted_configs = sorted(configs.items(), key=lambda x: int(x[1]['octet']))
            for client_name, config_info in sorted_configs:
                escaped_name = self.escape_markdown(client_name)
                clients_msg += f"‚Ä¢ **{escaped_name}** - {config_info['ip']} (–æ–∫—Ç–µ—Ç: {config_info['octet']})\n"
            
            clients_msg += f"\nüìù **–°–ø–æ—Å–æ–±—ã —É–¥–∞–ª–µ–Ω–∏—è:**\n"
            clients_msg += f"**–ü–æ –∏–º–µ–Ω–∏:** –í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞\n"
            clients_msg += f"**–ü–æ IP:** –í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–∫—Ç–µ—Ç IP\n\n"
            clients_msg += f"–ù–∞–ø—Ä–∏–º–µ—Ä: `server1` –∏–ª–∏ `47`"
            
            self.bot.send_message(
                message.chat.id, 
                clients_msg, 
                reply_markup=types.ReplyKeyboardRemove(),
                parse_mode='Markdown'
            )
            
            self.bot.register_next_step_handler(message, self.delete_vpn_config)
            
        except Exception as e:
            logger.error(f"Error showing delete prompt: {e}")
            self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤")
            self.show_monitoring_menu(message)
    
    def send_configs(self, message):
        try:
            self.bot.send_message(message.chat.id, "üìÅ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π WireGuard...")
            
            # Get client configurations info first
            configs = self.scan_existing_configs()
            
            # Send summary first
            if configs:
                summary_msg = f"üìã **–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π ({len(configs)} –∫–ª–∏–µ–Ω—Ç–æ–≤):**\n\n"
                
                sorted_configs = sorted(configs.items(), key=lambda x: int(x[1]['octet']))
                for client_name, config_info in sorted_configs:
                    escaped_name = self.escape_markdown(client_name)
                    summary_msg += f"üë§ **{escaped_name}** - {config_info['ip']}\n"
                
                self.bot.send_message(message.chat.id, summary_msg, parse_mode='Markdown')
            
            # Send main server config file
            main_config = Path("/etc/wireguard/wg0.conf")
            if main_config.exists():
                self.bot.send_message(message.chat.id, "üó∫ –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞:")
                with open(main_config, 'rb') as file:
                    self.bot.send_document(message.chat.id, file, caption="üó∫ wg0.conf - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞")
            
            # Send client configs with better organization
            if configs:
                self.bot.send_message(message.chat.id, f"üì¶ –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ({len(configs)} —Ñ–∞–π–ª–æ–≤)...")
                
                sorted_configs = sorted(configs.items(), key=lambda x: int(x[1]['octet']))
                for client_name, config_info in sorted_configs:
                    try:
                        with open(config_info['file'], 'rb') as file:
                            caption = f"üë§ {client_name} - {config_info['ip']}"
                            self.bot.send_document(message.chat.id, document=file, caption=caption)
                    except Exception as e:
                        logger.error(f"Error sending config file {config_info['file']}: {e}")
                        self.bot.send_message(
                            message.chat.id, 
                            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {client_name}: {str(e)[:100]}"
                        )
            else:
                self.bot.send_message(message.chat.id, "‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            # Send configs summary file if exists
            configs_file = Path("configs.txt")
            if configs_file.exists():
                with open(configs_file, 'rb') as file:
                    self.bot.send_document(
                        message.chat.id, 
                        file, 
                        caption="üìÑ –°–≤–æ–¥–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"
                    )
            
            self.bot.send_message(message.chat.id, "‚úÖ –í—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
            logger.info(f"Sent configs for {len(configs)} clients")
            
        except Exception as e:
            logger.error(f"Error sending configs: {e}")
            self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
    
    def backup_config(self, message):
        """Create and send backup configuration as file"""
        try:
            self.bot.send_message(message.chat.id, "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
            
            # Create backup using existing script
            result = subprocess.run(['scripts/backup.sh'], capture_output=True, text=True)
            if result.returncode != 0:
                logger.error(f"Backup script failed: {result.stderr}")
                self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
                return
            
            # Create comprehensive backup file
            backup_data = self.create_backup_data()
            
            if not backup_data:
                self.bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")
                return
            
            # Create backup file with timestamp
            from datetime import datetime
            import json
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_filename = f"wg_backup_{timestamp}.json"
            
            with open(backup_filename, 'w', encoding='utf-8') as f:
                json.dump(backup_data, f, indent=2, ensure_ascii=False)
            
            # Send backup file
            with open(backup_filename, 'rb') as f:
                self.bot.send_document(
                    message.chat.id,
                    f,
                    caption=f"üóÑÔ∏è –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è WireGuard\n"
                           f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n"
                           f"üìä –ö–ª–∏–µ–Ω—Ç–æ–≤: {len(backup_data.get('clients', {}))}"
                )
            
            # Clean up temp file
            import os
            os.remove(backup_filename)
            
            self.bot.send_message(message.chat.id, "‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            logger.info("Configuration backed up and sent successfully")
            
        except Exception as e:
            logger.error(f"Error during backup: {e}")
            self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")

    def create_backup_data(self):
        """Create comprehensive backup data"""
        try:
            backup_data = {
                "version": "1.0",
                "created": datetime.now().isoformat(),
                "server_config": {},
                "clients": {},
                "variables": {}
            }
            
            # Backup server configuration
            server_config_path = Path("/etc/wireguard/wg0.conf")
            if server_config_path.exists():
                with open(server_config_path, 'r', encoding='utf-8') as f:
                    backup_data["server_config"]["wg0.conf"] = f.read()
            
            # Backup server keys
            for key_file in ["privatekey", "publickey"]:
                key_path = Path(f"/etc/wireguard/{key_file}")
                if key_path.exists():
                    with open(key_path, 'r', encoding='utf-8') as f:
                        backup_data["server_config"][key_file] = f.read().strip()
            
            # Backup client configurations
            configs = self.scan_existing_configs()
            for client_name, config_info in configs.items():
                client_data = {
                    "ip": config_info["ip"],
                    "octet": config_info["octet"],
                    "config_content": ""
                }
                
                # Read client config file
                if config_info["file"].exists():
                    with open(config_info["file"], 'r', encoding='utf-8') as f:
                        client_data["config_content"] = f.read()
                
                # Read client keys if they exist
                for key_type in ["privatekey", "publickey"]:
                    key_path = Path(f"/etc/wireguard/{client_name}_{key_type}")
                    if key_path.exists():
                        with open(key_path, 'r', encoding='utf-8') as f:
                            client_data[key_type] = f.read().strip()
                
                backup_data["clients"][client_name] = client_data
            
            # Backup variables
            variables_path = Path("scripts/variables.sh")
            if variables_path.exists():
                with open(variables_path, 'r', encoding='utf-8') as f:
                    backup_data["variables"]["variables.sh"] = f.read()
            
            env_path = Path("scripts/env.sh")
            if env_path.exists():
                with open(env_path, 'r', encoding='utf-8') as f:
                    backup_data["variables"]["env.sh"] = f.read()
            
            return backup_data
            
        except Exception as e:
            logger.error(f"Error creating backup data: {e}")
            return None
    
    def restore_config(self, message):
        """Start import process - ask user to send backup file"""
        try:
            self.bot.send_message(
                message.chat.id, 
                "üì§ **–ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞**\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ WireGuard (JSON —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .json)\n"
                "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω —Ñ—É–Ω–∫—Ü–∏–µ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.",
                reply_markup=types.ReplyKeyboardRemove(),
                parse_mode='Markdown'
            )
            
            # Register handler for file upload
            self.bot.register_next_step_handler(message, self.handle_restore_file)
            
        except Exception as e:
            logger.error(f"Error starting restore: {e}")
            self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–º–ø–æ—Ä—Ç–∞")

    def handle_restore_file(self, message):
        """Handle uploaded backup file"""
        if not self.is_authorized(message.chat.id):
            self.send_unauthorized_message(message)
            return
        
        try:
            # Check if file was sent
            if not message.document:
                self.bot.send_message(
                    message.chat.id, 
                    "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ JSON —Ñ–∞–π–ª —Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–µ–π."
                )
                self.show_admin_menu(message)
                return
            
            # Check file extension
            if not message.document.file_name.endswith('.json'):
                self.bot.send_message(
                    message.chat.id, 
                    "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ JSON —Ñ–∞–π–ª."
                )
                self.show_admin_menu(message)
                return
            
            # Check file size (max 10MB)
            if message.document.file_size > 10 * 1024 * 1024:
                self.bot.send_message(
                    message.chat.id, 
                    "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB"
                )
                self.show_admin_menu(message)
                return
            
            self.bot.send_message(message.chat.id, "üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
            
            # Download file
            file_info = self.bot.get_file(message.document.file_id)
            downloaded_file = self.bot.download_file(file_info.file_path)
            
            # Save temporarily
            import tempfile
            import json
            
            with tempfile.NamedTemporaryFile(mode='wb', suffix='.json', delete=False) as temp_file:
                temp_file.write(downloaded_file)
                temp_filename = temp_file.name
            
            # Parse and validate backup file
            try:
                with open(temp_filename, 'r', encoding='utf-8') as f:
                    backup_data = json.load(f)
                
                if not self.validate_backup_file(backup_data):
                    self.bot.send_message(
                        message.chat.id, 
                        "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"
                    )
                    return
                
                # Show confirmation
                self.show_restore_confirmation(message, backup_data, temp_filename)
                
            except json.JSONDecodeError:
                self.bot.send_message(
                    message.chat.id, 
                    "‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞. –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç."
                )
                import os
                os.unlink(temp_filename)
                self.show_admin_menu(message)
                
        except Exception as e:
            logger.error(f"Error handling restore file: {e}")
            self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞")
            self.show_admin_menu(message)

    def validate_backup_file(self, backup_data):
        """Validate backup file structure"""
        try:
            required_fields = ["version", "created", "server_config", "clients"]
            for field in required_fields:
                if field not in backup_data:
                    return False
            
            return True
        except:
            return False

    def show_restore_confirmation(self, message, backup_data, temp_filename):
        """Show restore confirmation with backup details"""
        try:
            clients_count = len(backup_data.get('clients', {}))
            created_date = backup_data.get('created', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            # Parse date for better display
            try:
                from datetime import datetime
                created_dt = datetime.fromisoformat(created_date.replace('Z', '+00:00'))
                created_str = created_dt.strftime('%d.%m.%Y %H:%M:%S')
            except:
                created_str = created_date
            
            # Create inline keyboard for confirmation
            markup = types.InlineKeyboardMarkup()
            confirm_btn = types.InlineKeyboardButton(
                "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–º–ø–æ—Ä—Ç", 
                callback_data=f"restore_confirm:{temp_filename}"
            )
            cancel_btn = types.InlineKeyboardButton(
                "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", 
                callback_data="restore_cancel"
            )
            markup.row(confirm_btn)
            markup.row(cancel_btn)
            
            confirmation_msg = (
                f"üìã **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞**\n\n"
                f"üóÑÔ∏è **–î–µ—Ç–∞–ª–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:**\n"
                f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {created_str}\n"
                f"üë• –ö–ª–∏–µ–Ω—Ç–æ–≤: {clients_count}\n"
                f"üìù –í–µ—Ä—Å–∏—è: {backup_data.get('version', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
                f"‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!**\n"
                f"–ò–º–ø–æ—Ä—Ç –∑–∞–º–µ–Ω–∏—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é WireGuard.\n"
                f"–í—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª–∏–µ–Ω—Ç—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!\n\n"
                f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–º–ø–æ—Ä—Ç?"
            )
            
            self.bot.send_message(
                message.chat.id,
                confirmation_msg,
                reply_markup=markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Error showing restore confirmation: {e}")
            self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∏–º–ø–æ—Ä—Ç–∞")
            self.show_admin_menu(message)

    def perform_restore(self, message, temp_filename):
        """Actually perform the restore operation"""
        try:
            # Edit message to show progress
            self.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=message.message_id,
                text="‚è≥ **–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...**\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
                parse_mode='Markdown'
            )
            
            # Load backup data
            import json
            with open(temp_filename, 'r', encoding='utf-8') as f:
                backup_data = json.load(f)
            
            # Stop WireGuard
            self.bot.send_message(message.chat.id, "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ WireGuard —Å–µ—Ä–≤–∏—Å–∞...")
            subprocess.run(['wg-quick', 'down', 'wg0'], capture_output=True, text=True)
            
            # Backup current configuration (just in case)
            import shutil
            from datetime import datetime
            backup_dir = f"/tmp/wg_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            import os
            os.makedirs(backup_dir, exist_ok=True)
            
            if Path("/etc/wireguard").exists():
                shutil.copytree("/etc/wireguard", f"{backup_dir}/wireguard", dirs_exist_ok=True)
            
            # Clear current configuration
            self.bot.send_message(message.chat.id, "üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
            subprocess.run(['rm', '-rf', '/etc/wireguard/*'], shell=True, capture_output=True)
            
            # Restore server configuration
            self.bot.send_message(message.chat.id, "üîß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞...")
            
            server_config = backup_data.get('server_config', {})
            
            # Restore main server config
            if 'wg0.conf' in server_config:
                with open('/etc/wireguard/wg0.conf', 'w', encoding='utf-8') as f:
                    f.write(server_config['wg0.conf'])
            
            # Restore server keys
            for key_file in ['privatekey', 'publickey']:
                if key_file in server_config:
                    with open(f'/etc/wireguard/{key_file}', 'w', encoding='utf-8') as f:
                        f.write(server_config[key_file])
                    subprocess.run(['chmod', '600' if key_file == 'privatekey' else '644', f'/etc/wireguard/{key_file}'])
            
            # Restore client configurations
            self.bot.send_message(message.chat.id, "üë• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π...")
            
            clients = backup_data.get('clients', {})
            restored_clients = 0
            
            for client_name, client_data in clients.items():
                try:
                    # Restore client config file
                    if 'config_content' in client_data and client_data['config_content']:
                        with open(f'/etc/wireguard/{client_name}_cl.conf', 'w', encoding='utf-8') as f:
                            f.write(client_data['config_content'])
                    
                    # Restore client keys
                    for key_type in ['privatekey', 'publickey']:
                        if key_type in client_data:
                            with open(f'/etc/wireguard/{client_name}_{key_type}', 'w', encoding='utf-8') as f:
                                f.write(client_data[key_type])
                            subprocess.run(['chmod', '600' if key_type == 'privatekey' else '644', 
                                          f'/etc/wireguard/{client_name}_{key_type}'])
                    
                    restored_clients += 1
                    
                except Exception as e:
                    logger.error(f"Error restoring client {client_name}: {e}")
            
            # Restore variables
            variables = backup_data.get('variables', {})
            if 'variables.sh' in variables:
                with open('scripts/variables.sh', 'w', encoding='utf-8') as f:
                    f.write(variables['variables.sh'])
            
            if 'env.sh' in variables:
                with open('scripts/env.sh', 'w', encoding='utf-8') as f:
                    f.write(variables['env.sh'])
            
            # Start WireGuard
            self.bot.send_message(message.chat.id, "üöÄ –ó–∞–ø—É—Å–∫ WireGuard —Å–µ—Ä–≤–∏—Å–∞...")
            result = subprocess.run(['wg-quick', 'up', 'wg0'], capture_output=True, text=True)
            
            # Clean up temp file
            os.unlink(temp_filename)
            
            # Send final result
            if result.returncode == 0:
                success_msg = (
                    f"‚úÖ **–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!**\n\n"
                    f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:**\n"
                    f"üë• –ö–ª–∏–µ–Ω—Ç–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {restored_clients}\n"
                    f"üü¢ WireGuard —Å–µ—Ä–≤–∏—Å: –ê–∫—Ç–∏–≤–µ–Ω\n\n"
                    f"üóÑÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: `{backup_dir}`"
                )
            else:
                success_msg = (
                    f"‚ö†Ô∏è **–ò–º–ø–æ—Ä—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏**\n\n"
                    f"üë• –ö–ª–∏–µ–Ω—Ç–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {restored_clients}\n"
                    f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ WireGuard: {result.stderr[:200]}...\n\n"
                    f"üóÑÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: `{backup_dir}`"
                )
            
            self.bot.send_message(message.chat.id, success_msg, parse_mode='Markdown')
            self.show_admin_menu(message)
            logger.info(f"Configuration restored from backup, {restored_clients} clients restored")
            
        except Exception as e:
            logger.error(f"Error performing restore: {e}")
            self.bot.send_message(
                message.chat.id, 
                f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ:**\n{str(e)[:200]}...\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –≤ `{backup_dir if 'backup_dir' in locals() else '/tmp'}`",
                parse_mode='Markdown'
            )
            self.show_admin_menu(message)
            
            # Clean up temp file
            try:
                import os
                if os.path.exists(temp_filename):
                    os.unlink(temp_filename)
            except:
                pass
    
    def install_wireguard(self, message):
        config_file = Path('/etc/wireguard/wg0.conf')
        
        if config_file.exists():
            logger.info(f"WireGuard config already exists: {config_file}")
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            yes_btn = types.KeyboardButton("–î–∞")
            no_btn = types.KeyboardButton("–ù–µ—Ç")
            markup.add(yes_btn, no_btn)
            self.bot.send_message(
                message.chat.id, 
                text="Wireguard —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.\n–•–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∑–∞–Ω–æ–≤–æ?", 
                reply_markup=markup
            )
        else:
            logger.info(f"WireGuard config not found: {config_file}")
            self.bot.send_message(
                message.chat.id, 
                "–ó–∞–ø—É—Å–∫–∞—é —É—Å—Ç–∞–Ω–æ–≤–∫—É Wireguard.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏."
            )
            self._run_wireguard_install(message)
    
    def reinstall_wireguard(self, message):
        try:
            self.bot.send_message(message.chat.id, "–£–¥–∞–ª—è—é –∫–æ–Ω—Ñ–∏–≥–∏...")
            
            cleanup_commands = [
                "rm -f variables.sh",
                "rm -rf /etc/wireguard/",
                "mkdir -p /etc/wireguard/",
                "rm -f configs.txt"
            ]
            
            for cmd in cleanup_commands:
                result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
                if result.returncode != 0:
                    logger.warning(f"Cleanup command failed: {cmd}, error: {result.stderr}")
            
            self.bot.send_message(message.chat.id, "–ó–∞–ø—É—Å–∫–∞—é —É—Å—Ç–∞–Ω–æ–≤–∫—É Wireguard")
            self._run_wireguard_install(message)
            
        except Exception as e:
            logger.error(f"Error during WireGuard reinstallation: {e}")
            self.bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–µ WireGuard")
        
        self.show_main_menu(message)
    
    def _run_wireguard_install(self, message):
        try:
            result = subprocess.run(['scripts/start_wg.sh'], capture_output=True, text=True)
            if result.returncode == 0:
                self.bot.send_message(message.chat.id, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Wireguard –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                logger.info("WireGuard installation completed successfully")
            else:
                logger.error(f"WireGuard installation failed: {result.stderr}")
                self.bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ WireGuard")
        except Exception as e:
            logger.error(f"Error running WireGuard installation: {e}")
            self.bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ WireGuard")
    
    def scan_existing_configs(self) -> dict:
        """Scan /etc/wireguard/ for existing client configurations"""
        configs = {}
        wireguard_dir = Path('/etc/wireguard')
        
        if not wireguard_dir.exists():
            logger.warning("WireGuard directory does not exist")
            return configs
        
        try:
            # Find all client config files
            client_configs = list(wireguard_dir.glob('*_cl.conf'))
            
            for config_file in client_configs:
                try:
                    # Extract client name from filename (remove _cl.conf suffix)
                    client_name = config_file.stem.replace('_cl', '')
                    
                    # Read config to extract IP
                    with open(config_file, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # Extract IP from Address line
                    ip_address = None
                    for line in content.split('\n'):
                        if line.strip().startswith('Address = '):
                            address_line = line.strip().replace('Address = ', '')
                            # Extract IP without subnet mask
                            ip_address = address_line.split('/')[0]
                            break
                    
                    if ip_address:
                        # Extract last octet
                        last_octet = ip_address.split('.')[-1]
                        configs[client_name] = {
                            'file': config_file,
                            'ip': ip_address,
                            'octet': last_octet
                        }
                        logger.info(f"Found config: {client_name} -> {ip_address}")
                    
                except Exception as e:
                    logger.error(f"Error reading config {config_file}: {e}")
                    continue
            
        except Exception as e:
            logger.error(f"Error scanning WireGuard directory: {e}")
        
        return configs
    
    def recreate_configs_file(self, configs: dict) -> bool:
        """Recreate the configs.txt file based on existing configurations"""
        try:
            configs_content = []
            configs_content.append("# WireGuard Client Configurations")
            configs_content.append(f"# Generated on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            configs_content.append("")
            
            if not configs:
                configs_content.append("No client configurations found.")
            else:
                configs_content.append(f"Total clients: {len(configs)}")
                configs_content.append("")
                configs_content.append("Client configurations:")
                
                # Sort by octet number
                sorted_configs = sorted(configs.items(), key=lambda x: int(x[1]['octet']))
                
                for client_name, config_info in sorted_configs:
                    configs_content.append(f"  {client_name}: {config_info['ip']} (octet: {config_info['octet']})")
            
            # Write to configs.txt
            configs_file = Path('configs.txt')
            with open(configs_file, 'w', encoding='utf-8') as f:
                f.write('\n'.join(configs_content))
            
            logger.info(f"Recreated configs.txt with {len(configs)} entries")
            return True
            
        except Exception as e:
            logger.error(f"Error recreating configs file: {e}")
            return False
    
    def recreate_configs(self, message):
        """Recreate configuration files based on existing WireGuard configs"""
        try:
            self.bot.send_message(message.chat.id, "üîÑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π...")
            
            # Scan existing configurations
            configs = self.scan_existing_configs()
            
            if not configs:
                self.bot.send_message(
                    message.chat.id, 
                    "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –≤ /etc/wireguard/"
                )
                logger.info("No client configurations found for recreation")
                return
            
            # Recreate configs.txt file
            if self.recreate_configs_file(configs):
                success_msg = f"‚úÖ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {len(configs)}\n\n"
                success_msg += "–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã:\n"
                
                # Sort by octet for display
                sorted_configs = sorted(configs.items(), key=lambda x: int(x[1]['octet']))
                for client_name, config_info in sorted_configs[:10]:  # Show max 10 entries
                    escaped_name = self.escape_markdown(client_name)
                    success_msg += f"‚Ä¢ {escaped_name}: {config_info['ip']}\n"
                
                if len(configs) > 10:
                    success_msg += f"... –∏ –µ—â—ë {len(configs) - 10} –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
                
                self.bot.send_message(message.chat.id, success_msg)
                
                # Send the recreated configs.txt file
                try:
                    with open('configs.txt', 'rb') as f:
                        self.bot.send_document(
                            message.chat.id, 
                            f, 
                            caption="üìÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"
                        )
                except Exception as e:
                    logger.error(f"Error sending recreated configs file: {e}")
                
                logger.info(f"Successfully recreated configs for {len(configs)} clients")
            else:
                self.bot.send_message(
                    message.chat.id, 
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"
                )
                
        except Exception as e:
            logger.error(f"Error during configs recreation: {e}")
            self.bot.send_message(
                message.chat.id, 
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"
            )
    
    def show_clients_monitor(self, message):
        """Show detailed client monitoring with IPs and config names"""
        try:
            self.bot.send_message(message.chat.id, "üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤...")
            
            # Scan existing configurations
            configs = self.scan_existing_configs()
            
            if not configs:
                self.bot.send_message(
                    message.chat.id, 
                    "‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                )
                return
            
            # Build detailed client list
            monitor_msg = f"üë• **–ú–æ–Ω–∏—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–æ–≤ WireGuard**\n\n"
            monitor_msg += f"üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            monitor_msg += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(configs)}\n"
            
            # Sort by IP octet for organized display
            sorted_configs = sorted(configs.items(), key=lambda x: int(x[1]['octet']))
            
            monitor_msg += f"\nüó∫ **–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤:**\n"
            
            # Group clients for better display (max 20 per message)
            chunks = [sorted_configs[i:i+20] for i in range(0, len(sorted_configs), 20)]
            
            for chunk_idx, chunk in enumerate(chunks):
                if chunk_idx > 0:
                    monitor_msg = f"\nüó∫ **–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤:**\n"
                
                for client_name, config_info in chunk:
                    # Get file modification time
                    try:
                        mod_time = datetime.fromtimestamp(config_info['file'].stat().st_mtime)
                        time_str = mod_time.strftime('%d.%m %H:%M')
                    except:
                        time_str = "N/A"
                    
                    # Get file size
                    try:
                        file_size = config_info['file'].stat().st_size
                        size_str = f"{file_size}B" if file_size < 1024 else f"{file_size//1024}KB"
                    except:
                        size_str = "N/A"
                    
                    # Format entry with emoji indicators and escape markdown
                    status_emoji = "üü¢"  # Green circle for active
                    escaped_name = self.escape_markdown(client_name)
                    monitor_msg += f"{status_emoji} **{escaped_name}**\n"
                    monitor_msg += f"   üåç IP: `{config_info['ip']}`\n"
                    monitor_msg += f"   üìÖ –°–æ–∑–¥–∞–Ω: {time_str}\n"
                    monitor_msg += f"   üìÑ –†–∞–∑–º–µ—Ä: {size_str}\n\n"
                
                # Send message (split if too long)
                if len(monitor_msg) > 4000:
                    self.bot.send_message(message.chat.id, monitor_msg, parse_mode='Markdown')
                    monitor_msg = ""
            
            # Send remaining content
            if monitor_msg:
                self.bot.send_message(message.chat.id, monitor_msg, parse_mode='Markdown')
            
            # Add summary at the end
            if len(configs) > 20:
                summary_msg = f"\nüìä **–°–≤–æ–¥–∫–∞:**\n"
                octets = [int(config['octet']) for config in configs.values()]
                used_octets = set(octets)
                available_octets = set(range(2, 254)) - used_octets
                
                summary_msg += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ IP: {min(octets)}-{max(octets)}\n"
                summary_msg += f"‚Ä¢ –°–≤–æ–±–æ–¥–Ω–æ IP: {len(available_octets)}\n"
                
                # Show next available IPs
                next_available = sorted(available_octets)[:5]
                if next_available:
                    ips_str = ", ".join([f"{self.wg_ip_hint}.{octet}" for octet in next_available])
                    summary_msg += f"‚Ä¢ –ë–ª–∏–∂–∞–π—à–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ: {ips_str}\n"
                
                self.bot.send_message(message.chat.id, summary_msg, parse_mode='Markdown')
            
            logger.info(f"Client monitoring displayed for {len(configs)} clients")
            
        except Exception as e:
            logger.error(f"Error showing client monitor: {e}")
            self.bot.send_message(
                message.chat.id, 
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤"
            )
    
    def show_statistics(self, message):
        """Show WireGuard server statistics"""
        try:
            self.bot.send_message(message.chat.id, "üìä –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
            
            # Scan existing configurations
            configs = self.scan_existing_configs()
            
            # Get server status
            server_status = self.get_server_status()
            
            # Build statistics message
            stats_msg = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ WireGuard —Å–µ—Ä–≤–µ—Ä–∞**\n\n"
            
            # Server info
            stats_msg += f"üü¢ **–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞:** {server_status['status']}\n"
            if server_status.get('interface'):
                stats_msg += f"üîå **–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å:** {server_status['interface']}\n"
            
            # Client statistics
            stats_msg += f"\nüë• **–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:**\n"
            stats_msg += f"‚Ä¢ –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(configs)}\n"
            
            if configs:
                # IP range analysis
                octets = [int(config['octet']) for config in configs.values()]
                stats_msg += f"‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω IP: {self.wg_ip_hint}.{min(octets)} - {self.wg_ip_hint}.{max(octets)}\n"
                
                # Available IPs
                used_octets = set(octets)
                available_octets = set(range(2, 254)) - used_octets
                stats_msg += f"‚Ä¢ –°–≤–æ–±–æ–¥–Ω—ã—Ö IP: {len(available_octets)}\n"
                
                # Recent configs
                stats_msg += f"\nüóì **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—ã:**\n"
                sorted_configs = sorted(
                    configs.items(), 
                    key=lambda x: x[1]['file'].stat().st_mtime, 
                    reverse=True
                )[:5]
                
                for client_name, config_info in sorted_configs:
                    mod_time = datetime.fromtimestamp(config_info['file'].stat().st_mtime)
                    escaped_name = self.escape_markdown(client_name)
                    stats_msg += f"‚Ä¢ **{escaped_name}** ({config_info['ip']}) - {mod_time.strftime('%d.%m.%Y %H:%M')}\n"
            else:
                stats_msg += "‚Ä¢ –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
            
            # System info
            system_info = self.get_system_info()
            if system_info:
                stats_msg += f"\nüíª **–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n{system_info}"
            
            self.bot.send_message(message.chat.id, stats_msg, parse_mode='Markdown')
            logger.info(f"Statistics shown for {len(configs)} clients")
            
        except Exception as e:
            logger.error(f"Error showing statistics: {e}")
            self.bot.send_message(
                message.chat.id, 
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
            )
    
    def get_server_status(self) -> dict:
        """Get WireGuard server status"""
        try:
            # Check if WireGuard is running (use ps instead of systemctl in container)
            result = subprocess.run(
                ['pgrep', '-f', 'wg-quick.*wg0'], 
                capture_output=True, 
                text=True
            )
            
            status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if result.returncode == 0 else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            
            # Get interface info if active
            interface_info = None
            if result.returncode == 0:
                wg_result = subprocess.run(['wg', 'show'], capture_output=True, text=True)
                if wg_result.returncode == 0 and wg_result.stdout:
                    interface_info = "wg0"
            
            return {
                'status': status,
                'interface': interface_info
            }
            
        except Exception as e:
            logger.error(f"Error getting server status: {e}")
            return {'status': '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
    
    def get_system_info(self) -> str:
        """Get basic system information"""
        try:
            info_parts = []
            
            # Disk usage for /etc/wireguard
            try:
                wg_dir = Path('/etc/wireguard')
                if wg_dir.exists():
                    total_size = sum(f.stat().st_size for f in wg_dir.rglob('*') if f.is_file())
                    info_parts.append(f"‚Ä¢ –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥–æ–≤: {total_size / 1024:.1f} KB")
            except:
                pass
            
            # Uptime (simplified)
            try:
                uptime_result = subprocess.run(['uptime', '-p'], capture_output=True, text=True)
                if uptime_result.returncode == 0:
                    info_parts.append(f"‚Ä¢ Uptime: {uptime_result.stdout.strip()}")
            except:
                pass
            
            return '\n'.join(info_parts) if info_parts else None
            
        except Exception as e:
            logger.error(f"Error getting system info: {e}")
            return None

def main():
    try:
        if not api_tg:
            logger.error("Telegram API token not configured")
            return
        
        if not mainid:
            logger.error("No authorized users configured")
            return
        
        wg_bot = WireGuardBot(api_tg, mainid, wg_local_ip_hint)
        logger.info("Starting WireGuard Telegram Bot...")
        logger.info(f"Authorized users: {mainid}")
        wg_bot.bot.polling(none_stop=True, interval=0)
        
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.critical(f"Critical error: {e}")
        raise


if __name__ == "__main__":
    main()

